{"/home/travis/build/npmtest/node-npmtest-semantic-release/test.js":"/* istanbul instrument in package npmtest_semantic_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-release/lib.npmtest_semantic_release.js":"/* istanbul instrument in package npmtest_semantic_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_semantic_release = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_semantic_release = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-release/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-semantic-release && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_semantic_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_semantic_release\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_semantic_release.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_semantic_release.rollup.js'] =\n            local.assetsDict['/assets.npmtest_semantic_release.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_semantic_release.__dirname + '/lib.npmtest_semantic_release.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/bin/semantic-release.js":"#!/usr/bin/env node\n\nvar fs = require('fs')\nvar path = require('path')\nvar url = require('url')\n\nvar _ = require('lodash')\nvar log = require('npmlog')\nvar nopt = require('nopt')\nvar npmconf = require('npmconf')\nvar normalizeData = require('normalize-package-data')\n\nlog.heading = 'semantic-release'\nvar env = process.env\nvar pkg = JSON.parse(fs.readFileSync('./package.json'))\nvar originalPkg = _.cloneDeep(pkg)\nnormalizeData(pkg)\nvar knownOptions = {\n  branch: String,\n  debug: Boolean,\n  'github-token': String,\n  'github-url': String,\n  'analyze-commits': [path, String],\n  'generate-notes': [path, String],\n  'verify-conditions': [path, String],\n  'verify-release': [path, String]\n}\nvar options = _.defaults(\n  _.mapKeys(nopt(knownOptions), function (value, key) {\n    return _.camelCase(key)\n  }),\n  pkg.release,\n  {\n    branch: 'master',\n    fallbackTags: {\n      next: 'latest'\n    },\n    debug: !env.CI,\n    githubToken: env.GH_TOKEN || env.GITHUB_TOKEN,\n    githubUrl: env.GH_URL\n  }\n)\nvar plugins = require('../src/lib/plugins')(options)\n\nnpmconf.load({}, function (err, conf) {\n  if (err) {\n    log.error('init', 'Failed to load npm config.', err)\n    process.exit(1)\n  }\n\n  var npm = {\n    auth: {\n      token: env.NPM_TOKEN\n    },\n    cafile: conf.get('cafile'),\n    loglevel: conf.get('loglevel'),\n    registry: require('../src/lib/get-registry')(pkg, conf),\n    tag: (pkg.publishConfig || {}).tag || conf.get('tag') || 'latest'\n  }\n\n  // normalize trailing slash\n  npm.registry = url.format(url.parse(npm.registry))\n\n  log.level = npm.loglevel\n\n  var config = {\n    env: env,\n    pkg: pkg,\n    options: options,\n    plugins: plugins,\n    npm: npm\n  }\n\n  var hide = {}\n  if (options.githubToken) hide.githubToken = '***'\n\n  log.verbose('init', 'options:', _.assign({}, options, hide))\n  log.verbose('init', 'Verifying config.')\n\n  var errors = require('../src/lib/verify')(config)\n  errors.forEach(function (err) {\n    log.error('init', err.message + ' ' + err.code)\n  })\n  if (errors.length) process.exit(1)\n\n  if (options.argv.remain[0] === 'pre') {\n    log.verbose('pre', 'Running pre-script.')\n    log.verbose('pre', 'Veriying conditions.')\n\n    plugins.verifyConditions(config, function (err) {\n      if (err) {\n        log[options.debug ? 'warn' : 'error']('pre', err.message)\n        if (!options.debug) process.exit(1)\n      }\n\n      var nerfDart = require('nerf-dart')(npm.registry)\n      var wroteNpmRc = false\n\n      if (env.NPM_OLD_TOKEN && env.NPM_EMAIL) {\n        // Using the old auth token format is not considered part of the public API\n        // This might go away anytime (i.e. once we have a better testing strategy)\n        conf.set('_auth', '${NPM_OLD_TOKEN}', 'project')\n        conf.set('email', '${NPM_EMAIL}', 'project')\n        wroteNpmRc = true\n      } else if (env.NPM_TOKEN) {\n        conf.set(nerfDart + ':_authToken', '${NPM_TOKEN}', 'project')\n        wroteNpmRc = true\n      }\n\n      conf.save('project', function (err) {\n        if (err) return log.error('pre', 'Failed to save npm config.', err)\n\n        if (wroteNpmRc) log.verbose('pre', 'Wrote authToken to .npmrc.')\n\n        require('../src/pre')(config, function (err, release) {\n          if (err) {\n            log.error('pre', 'Failed to determine new version.')\n\n            var args = ['pre', (err.code ? err.code + ' ' : '') + err.message]\n            if (err.stack) args.push(err.stack)\n            log.error.apply(log, args)\n            process.exit(1)\n          }\n\n          var message = 'Determined version ' + release.version + ' as \"' + npm.tag + '\".'\n\n          log.verbose('pre', message)\n\n          if (options.debug) {\n            log.error('pre', message + ' Not publishing in debug mode.', release)\n            process.exit(1)\n          }\n\n          try {\n            var shrinkwrap = JSON.parse(fs.readFileSync('./npm-shrinkwrap.json'))\n            shrinkwrap.version = release.version\n            fs.writeFileSync('./npm-shrinkwrap.json', JSON.stringify(shrinkwrap, null, 2))\n            log.verbose('pre', 'Wrote version ' + release.version + 'to npm-shrinkwrap.json.')\n          } catch (e) {\n            log.silly('pre', 'Couldn\\'t find npm-shrinkwrap.json.')\n          }\n\n          fs.writeFileSync('./package.json', JSON.stringify(_.assign(originalPkg, {\n            version: release.version\n          }), null, 2))\n\n          log.verbose('pre', 'Wrote version ' + release.version + ' to package.json.')\n        })\n      })\n    })\n  } else if (options.argv.remain[0] === 'post') {\n    log.verbose('post', 'Running post-script.')\n\n    require('../src/post')(config, function (err, published, release) {\n      if (err) {\n        log.error('post', 'Failed to publish release notes.', err)\n        process.exit(1)\n      }\n\n      log.verbose('post', (published ? 'Published' : 'Generated') + ' release notes.', release)\n    })\n  } else {\n    log.error('post', 'Command \"' + options.argv.remain[0] + '\" not recognized. Use either \"pre\" or \"post\"')\n  }\n})\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/lib/plugins.js":"var relative = require('require-relative')\nvar series = require('run-series')\n\nvar exports = module.exports = function (options) {\n  var plugins = {\n    analyzeCommits: exports.normalize(options.analyzeCommits, '@semantic-release/commit-analyzer'),\n    generateNotes: exports.normalize(options.generateNotes, '@semantic-release/release-notes-generator'),\n    getLastRelease: exports.normalize(options.getLastRelease, '@semantic-release/last-release-npm')\n  }\n\n  ;['verifyConditions', 'verifyRelease'].forEach(function (plugin) {\n    if (!Array.isArray(options[plugin])) {\n      plugins[plugin] = exports.normalize(\n        options[plugin],\n        plugin === 'verifyConditions'\n          ? '@semantic-release/condition-travis'\n          : './plugin-noop'\n      )\n      return\n    }\n\n    plugins[plugin] = function (pluginOptions, cb) {\n      var tasks = options[plugin].map(function (step) {\n        return exports.normalize(step, './plugin-noop').bind(null, pluginOptions)\n      })\n\n      series(tasks, cb)\n    }\n  })\n\n  return plugins\n}\n\nexports.normalize = function (pluginConfig, fallback) {\n  if (typeof pluginConfig === 'string') return relative(pluginConfig).bind(null, {})\n\n  if (pluginConfig && (typeof pluginConfig.path === 'string')) {\n    return relative(pluginConfig.path).bind(null, pluginConfig)\n  }\n\n  return require(fallback).bind(null, pluginConfig)\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/post.js":"var url = require('url')\n\nvar gitHead = require('git-head')\nvar GitHubApi = require('github')\nvar parseSlug = require('@bahmutov/parse-github-repo-url')\n\nmodule.exports = function (config, cb) {\n  var pkg = config.pkg\n  var options = config.options\n  var plugins = config.plugins\n  var ghConfig = options.githubUrl ? url.parse(options.githubUrl) : {}\n\n  var github = new GitHubApi({\n    version: '3.0.0',\n    port: ghConfig.port,\n    protocol: (ghConfig.protocol || '').split(':')[0] || null,\n    host: ghConfig.hostname,\n    pathPrefix: options.githubApiPathPrefix || null\n  })\n\n  plugins.generateNotes(config, function (err, log) {\n    if (err) return cb(err)\n\n    gitHead(function (err, hash) {\n      if (err) return cb(err)\n\n      var ghRepo = parseSlug(pkg.repository.url)\n      var release = {\n        owner: ghRepo[0],\n        repo: ghRepo[1],\n        name: 'v' + pkg.version,\n        tag_name: 'v' + pkg.version,\n        target_commitish: hash,\n        draft: !!options.debug,\n        body: log\n      }\n\n      if (options.debug && !options.githubToken) {\n        return cb(null, false, release)\n      }\n\n      github.authenticate({\n        type: 'oauth',\n        token: options.githubToken\n      })\n\n      github.releases.createRelease(release, function (err) {\n        if (err) return cb(err)\n\n        cb(null, true, release)\n      })\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/pre.js":"var _ = require('lodash')\nvar auto = require('run-auto')\nvar semver = require('semver')\n\nvar getCommits = require('./lib/commits')\nvar getType = require('./lib/type')\n\nmodule.exports = function (config, cb) {\n  var plugins = config.plugins\n\n  auto({\n    lastRelease: plugins.getLastRelease.bind(null, config),\n    commits: ['lastRelease', function (results, cb) {\n      getCommits(_.assign({\n        lastRelease: results.lastRelease\n      }, config),\n      cb)\n    }],\n    type: ['commits', 'lastRelease', function (results, cb) {\n      getType(_.assign({\n        commits: results.commits,\n        lastRelease: results.lastRelease\n      }, config),\n      cb)\n    }]\n  }, function (err, results) {\n    if (err) return cb(err)\n\n    var nextRelease = {\n      type: results.type,\n      version: results.type === 'initial'\n        ? '1.0.0'\n        : semver.inc(results.lastRelease.version, results.type)\n    }\n\n    plugins.verifyRelease(_.assign({\n      commits: results.commits,\n      lastRelease: results.lastRelease,\n      nextRelease: nextRelease\n    }, config), function (err) {\n      if (err) return cb(err)\n      cb(null, nextRelease)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/lib/commits.js":"var exec = require('child_process').exec\n\nvar log = require('npmlog')\n\nvar SemanticReleaseError = require('@semantic-release/error')\n\nmodule.exports = function (config, cb) {\n  var lastRelease = config.lastRelease\n  var options = config.options\n  var branch = options.branch\n  var from = lastRelease.gitHead\n  var range = (from ? from + '..' : '') + 'HEAD'\n\n  if (!from) return extract()\n\n  exec('git branch --contains ' + from, function (err, stdout) {\n    var inHistory = false\n    var branches\n\n    if (!err && stdout) {\n      branches = stdout.split('\\n')\n      .map(function (result) {\n        if (branch === result.replace('*', '').trim()) {\n          inHistory = true\n          return null\n        }\n        return result.trim()\n      })\n      .filter(function (branch) {\n        return !!branch\n      })\n    }\n\n    if (!inHistory) {\n      log.error('commits',\n        'The commit the last release of this package was derived from is not in the direct history of the \"' + branch + '\" branch.\\n' +\n        'This means semantic-release can not extract the commits between now and then.\\n' +\n        'This is usually caused by force pushing, releasing from an unrelated branch, or using an already existing package name.\\n' +\n        'You can recover from this error by publishing manually or restoring the commit \"' + from + '\".' + (branches && branches.length\n        ? '\\nHere is a list of branches that still contain the commit in question: \\n * ' + branches.join('\\n * ')\n        : ''\n      ))\n      return cb(new SemanticReleaseError('Commit not in history', 'ENOTINHISTORY'))\n    }\n\n    extract()\n  })\n\n  function extract () {\n    exec(\n      'git log -E --format=%H==SPLIT==%B==END== ' + range,\n      {\n        maxBuffer: 1024 * 1024 // 1MB instead of 220KB (issue #286)\n      },\n      function (err, stdout) {\n        if (err) return cb(err)\n\n        cb(null, String(stdout).split('==END==\\n')\n\n        .filter(function (raw) {\n          return !!raw.trim()\n        })\n\n        .map(function (raw) {\n          var data = raw.split('==SPLIT==')\n          return {\n            hash: data[0],\n            message: data[1]\n          }\n        }))\n      }\n    )\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/lib/type.js":"var SemanticReleaseError = require('@semantic-release/error')\n\nmodule.exports = function (config, cb) {\n  var plugins = config.plugins\n  var lastRelease = config.lastRelease\n\n  plugins.analyzeCommits(config, function (err, type) {\n    if (err) return cb(err)\n\n    if (!type) {\n      return cb(new SemanticReleaseError(\n        'There are no relevant changes, so no new version is released.',\n        'ENOCHANGE'\n      ))\n    }\n\n    if (!lastRelease.version) return cb(null, 'initial')\n\n    cb(null, type)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/lib/get-registry.js":"module.exports = function (pkg, conf) {\n  if (pkg.publishConfig && pkg.publishConfig.registry) return pkg.publishConfig.registry\n\n  if (pkg.name[0] !== '@') return conf.get('registry') || 'https://registry.npmjs.org/'\n\n  var scope = pkg.name.split('/')[0]\n  var scopedRegistry = conf.get(scope + '/registry')\n\n  if (scopedRegistry) return scopedRegistry\n\n  return conf.get('registry') || 'https://registry.npmjs.org/'\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/lib/plugin-noop.js":"/* istanbul ignore next */\nmodule.exports = function (config, options, cb) {\n  cb(null)\n}\n","/home/travis/build/npmtest/node-npmtest-semantic-release/node_modules/semantic-release/src/lib/verify.js":"var SemanticReleaseError = require('@semantic-release/error')\n\nmodule.exports = function (config) {\n  var pkg = config.pkg\n  var options = config.options\n  var env = config.env\n  var errors = []\n\n  if (!pkg.name) {\n    errors.push(new SemanticReleaseError(\n      'No \"name\" found in package.json.',\n      'ENOPKGNAME'\n    ))\n  }\n\n  if (!pkg.repository || !pkg.repository.url) {\n    errors.push(new SemanticReleaseError(\n      'No \"repository\" found in package.json.',\n      'ENOPKGREPO'\n    ))\n  }\n\n  if (options.debug) return errors\n\n  if (!options.githubToken) {\n    errors.push(new SemanticReleaseError(\n      'No github token specified.',\n      'ENOGHTOKEN'\n    ))\n  }\n\n  if (!(env.NPM_TOKEN || (env.NPM_OLD_TOKEN && env.NPM_EMAIL))) {\n    errors.push(new SemanticReleaseError(\n      'No npm token specified.',\n      'ENONPMTOKEN'\n    ))\n  }\n\n  return errors\n}\n"}